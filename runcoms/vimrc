" vimrc
" Current author: Daniel Freedman
" Previous author: David Majnemer
" Original author: Saleem Abdulrasool <compnerd@compnerd.org>
" vim: set ts=3 sw=3 et nowrap:

if has('multi_byte')      " Make sure we have unicode support
   scriptencoding utf-8    " This file is in UTF-8

   " ---- Terminal Setup ----
   if (&termencoding == "" && (&term =~ "xterm" || &term =~ "putty")) || (&term =~ "rxvt-unicode") || (&term =~ "rxvt-256color") || (&term =~ "screen")
      set termencoding=utf-8
   endif
   set encoding=utf-8      " Default encoding should always be UTF-8
endif

" ---- General Setup ----
set tabstop=2              " 2 spaces for tabs
set shiftwidth=2           " 2 spaces for indents
set expandtab              " use spaces
set smarttab               " Tab next line based on current line
set autoindent             " Automatically indent next line
if has('smartindent')
   set smartindent         " Indent next line based on current line
endif
set incsearch              " Enable incremental searching
set hlsearch               " Highlight search matches
set ignorecase             " Ignore case when searching...
set smartcase              " ...except when we don't want it
set infercase              " Attempt to figure out the correct case
set showfulltag            " Show full tags when doing completion
set virtualedit=block      " Only allow virtual editing in block mode
set lazyredraw             " Lazy Redraw (faster macro execution)
set wildmenu               " Menu on completion please
set wildmode=longest,full  " Match the longest substring, complete with first
set wildignore=*.o,*~      " Ignore temp files in wildmenu
set scrolloff=3            " Show 3 lines of context during scrolls
set sidescrolloff=2        " Show 2 columns of context during scrolls
set backspace=indent,eol,start " backspace everywhere
set textwidth=80           " Break lines at 80 characters
set hidden                 " Allow flipping of buffers without saving
set noerrorbells           " Disable error bells
set visualbell             " Turn visual bell on
set t_vb=                  " Make the visual bell emit nothing
set showcmd                " Show the current command
set number                 " Show line numbers
if has('diff')
   if has('macunix')
      set diffopt-=internal " mac vim in catalina breaks internal diff library
   endif
   set diffopt+=iwhite     " Ignore whitespace diffs
endif
set showmatch              " Highlight matching brackets when a new one is inserted
set display=lastline,uhex  " cut the line off at a real character, show hex as <xx>
set shiftround             " Round intends to multiples of 'shiftwidth'
set splitbelow             " make new horizontal splits below
set splitright             " make new horizontal splits to the right
let mapleader=","          " comma is leader
set shortmess=atI          " use a lot of abbreviations
set laststatus=2           " always show a statusline
set bg=dark                " dark background

" ---- plug ----
call plug#begin('~/.vim/bundle')
Plug 'sheerun/vim-polyglot'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'drmikehenry/vim-fontdetect'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'cdata/vim-tagged-template'
Plug 'morhetz/gruvbox'
call plug#end()

" ---- Load colorscheme after pathogen ----
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox

" ---- Filetypes ----
if has('autocmd')
   filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
   syntax on
endif

" ---- Spelling ----
if (v:version >= 700)
   set spelllang=en_us        " US English Spelling please

   " Toggle spellchecking with F10
   nnoremap <silent><leader>s :set spell!<CR>
endif

" Show trailing whitespace visually
" Shamelessly stolen from Ciaran McCreesh <ciaranm@gentoo.org>
if (&termencoding == "utf-8") || has("gui_running")
   if v:version >= 700
      set list listchars=tab:»·,trail:·,extends:…,nbsp:‗
   else
      set list listchars=tab:»·,trail:·,extends:…
   endif
else
   if v:version >= 700
      set list listchars=tab:>-,trail:.,extends:>,nbsp:_
   else
      set list listchars=tab:>-,trail:.,extends:>
   endif
endif

if has('mouse')
   " Dont copy the listchars when copying
   set mouse=nvi
endif

if has('autocmd')
   " always refresh syntax from start
   autocmd BufEnter * syntax sync fromstart
endif

if v:version > 703 || v:version == 703 && has("patch541")
   set formatoptions+=j " delete comment characters when joining lines
endif

" ---- cscope/ctags setup ----
if has('cscope') && executable('cscope') == 1
   " Search cscope and ctags, in that order
   set cscopetag
   set cscopetagorder=0

   set nocsverb
   if filereadable('cscope.out')
      cs add cscope.out
   endif
   set csverb
endif

" ---- Key Mappings ----

" Append modeline after last line in buffer.
" Use substitute() (not printf()) to handle '%%s' modeline in LaTeX files.
if has('eval')
   fun! AppendModeline()
      let save_cursor = getpos('.')
      let append = ' vim: set ts='.&tabstop.' sw='.&shiftwidth.' tw='.&textwidth.': '
      $put =substitute(&commentstring, '%s', append, '')
      call setpos('.', save_cursor)
   endfun
   nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
endif

" tab indents selection
vmap <silent> <Tab> >gv

" shift-tab unindents
vmap <silent> <S-Tab> <gv

" Page using space
noremap <Space> <C-F>

" shifted arrows are stupid
inoremap <S-Up> <C-O>gk
noremap  <S-Up> gk
inoremap <S-Down> <C-O>gj
noremap  <S-Down> gj

" Y should yank to EOL
map Y y$

" vK is stupid
vmap K k

" :W and :Q are annoying
if has('user_commands')
   command! -nargs=0 -bang Q q<bang>
   command! -nargs=0 -bang W w<bang>
   command! -nargs=0 -bang WQ wq<bang>
   command! -nargs=0 -bang Wq wq<bang>
endif

" just continue
nmap K K<cr>

" stolen from auctex.vim
if has('eval')
   fun! EmacsKill()
      if col(".") == strlen(getline(line(".")))+1
         let @" = "\<CR>"
         return "\<Del>"
      else
         return "\<C-O>D"
      endif
   endfun
endif

" some emacs-isms are OK
map! <C-a> <Home>
map  <C-a> <Home>
map! <C-e> <End>
map  <C-e> <End>
imap <C-f> <Right>
imap <C-b> <Left>
map! <M-BS> <C-w>
map  <C-k> d$
if has('eval')
   inoremap <buffer> <C-K> <C-R>=EmacsKill()<CR>
endif

" Disable q and Q
map q <Nop>
map Q <Nop>

" Toggle numbers with <leader>n
nnoremap <silent><leader>n :set number!<CR>
nnoremap <silent><leader><space> :noh<CR>
fun! ToggleNumber()
   if(&relativenumber == 1)
      set norelativenumber
      set number
   else
      set relativenumber
   endif
endfun
nmap <silent><leader>r :call ToggleNumber()<CR>

" Don't force column 0 for #
inoremap # X<BS>#

" highlight last inserted text
nnoremap gV `[v`]

" Terminal.app does not support back color erase
if ($TERM_PROGRAM ==# "Apple_Terminal" && $TERM_PROGRAM_VERSION <= 273)
   set t_ut=
endif

" Python specific stuff
if has('eval')
   let python_highlight_all = 1
   let python_slow_sync = 1
endif

" ---- matchit ----
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
   runtime! macros/matchit.vim
endif

" ---- NERDCommenter ----
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1

" ---- airline ----
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#branch#empty_message = ''
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1
let g:airline_inactive_collapse = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''

" ---- syntastic ----
let g:syntastic_ignore_files = ['\.min\.js$', '\.js\.map$']
" let g:syntastic_check_on_open = 1
" Jump to first error line
" let g:syntastic_auto_jump = 2
nnoremap <silent><leader>sc :SyntasticCheck<CR>
nnoremap <silent><leader>se :Errors<CR>

" lint inline javascript
let g:syntastic_html_checkers = ['eslint']

" ---- markdown ----
let g:vim_markdown_folding_disabled = 1

" ---- CtrlP ----
nnoremap <silent><leader>b :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
\ 'dir': '\v[\/](node_modules|bower_components)'
\}

" ---- vim-tagged-template ----
let g:taggedtemplate#tagSyntaxMap = {
\ "html": "html",
\ "css": "css"
\}
autocmd FileType javascript,javascript.jsx,typescript,typescript.tsx : call taggedtemplate#applySyntaxMap()
